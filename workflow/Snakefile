configfile: "config/config.yml"

rule all:
    input:
        expand("data/{sample}.fasta", sample=config["samples"]),
        expand("outputs/{sample}_aligned.fasta", sample=config["samples"]),
        expand("outputs/{sample}_modeltest.out", sample=config["samples"]),
        expand("outputs/{sample}.raxml.support", sample=config["samples"]),
        expand("outputs/{sample}_tree.pdf", sample=config["samples"])

rule align:
    input:
        expand("data/{sample}.fasta", sample=config["samples"])
    output:
        "outputs/{sample}_aligned.fasta"
    conda:
        "envs/mafft.yml"
    shell:
        "mafft {input} > {output}"

rule model:
    input:
        expand("outputs/{sample}_aligned.fasta", sample=config["samples"])
    output:
        model = "outputs/{sample}_modeltest.out"
    conda:
        "envs/modeltest.yml"
    params:
        output_prefix = subpath(output.model, ".out")
    shell:
        "modeltest-ng -i {input} -o {params.output_prefix}"

rule parse_model:
    input:
        expand("outputs/{sample}_modeltest.out", sample=config["samples"])
    output:
        "outputs/{sample}_my_model.txt"
    run:
        import scripts.get_model
        my_model = scripts.get_model.parse_modeltest(str(input))
        with open(str(output), "w") as my_output:
            my_output.write(f"{my_model}\n")

rule tree_inference:
    input:
        fasta = expand("outputs/{sample}_aligned.fasta", sample=config["samples"]),
        model_text = expand("outputs/{sample}_my_model.txt", sample=config["samples"])
    output:
        support = "outputs/{sample}.raxml.support"
    conda:
        "envs/raxml.yml"
    params:
        output_prefix = subpath(output.support, ".raxml.support")
    shell:
        "raxml-ng --all --msa {input.fasta} --model $(cat {input.model_text}) --prefix {params.output_prefix} --bs-trees {config[bootstrap]}"

rule figtree:
    input:
        expand("outputs/{sample}.raxml.support", sample=config["samples"])
    output:
        "outputs/{sample}_tree.pdf"
    conda:
        "envs/figtree.yml"
    shell:
        "figtree -graphic PDF {input} {output}"
